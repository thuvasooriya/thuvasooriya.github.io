---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import type { HTMLTag, Polymorphic } from "astro/types";
import FormattedDate from "@/components/FormattedDate.astro";

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
	post: CollectionEntry<"post">;
	withDesc?: boolean;
};

const { as: Tag = "article", post, withDesc = true } = Astro.props;
const { title, description, publishDate, tags, coverImage, draft } = post.data;
---

<Tag class="card group block overflow-hidden @container">
	<a href={`/posts/${post.id}/`} class="card-link block p-3" data-astro-prefetch>
		<!-- mobile layout: vertical stack (< 480px) -->
		<div class="flex flex-col gap-3 @[480px]:hidden">
			<!-- image -->
			<div class="relative w-full aspect-[4/3] overflow-hidden rounded-lg">
				{
					coverImage ? (
						<Image
							src={coverImage.src}
							alt={coverImage.alt}
							class="h-full w-full object-cover"
							loading="lazy"
							width={600}
							height={400}
						/>
					) : (
						<div class="from-accent/20 to-primary/20 flex h-full w-full items-center justify-center bg-gradient-to-br">
							<svg
								class="h-8 w-8 text-gray-400"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
								/>
							</svg>
						</div>
					)
				}
				{
					draft && (
						<div class="bg-warning absolute top-2 left-2 rounded px-2 py-1 text-xs font-semibold tracking-wider text-black uppercase">
							draft
						</div>
					)
				}
			</div>

			<!-- title -->
			<h3 class="card-title line-clamp-1 text-lg font-semibold">
				{title}
			</h3>

			<!-- date -->
			<FormattedDate
				class="card-meta text-xs font-medium"
				date={publishDate}
			/>

			<!-- description -->
			{
				withDesc && description && (
					<p class="card-text line-clamp-1 text-sm leading-relaxed">
						{description}
					</p>
				)
			}

			<!-- tags -->
			{
				tags && tags.length > 0 && (
					<div class="flex min-w-0 flex-wrap items-center gap-1.5">
						{tags.slice(0, 3).map((tag: string) => (
							<span class="card-badge whitespace-nowrap px-2 py-1 text-xs font-medium">
								#{tag}
							</span>
						))}
						{tags.length > 3 && (
							<span class="card-badge px-2 py-1 text-xs">
								+{tags.length - 3}
							</span>
						)}
					</div>
				)
			}
		</div>

		<!-- desktop layout: horizontal (>= 480px) -->
		<div class="hidden @[480px]:flex @[480px]:gap-4">
			<!-- image -->
			<div class="relative w-40 aspect-[4/3] flex-shrink-0 overflow-hidden rounded-lg @[640px]:w-48">
				{
					coverImage ? (
						<Image
							src={coverImage.src}
							alt={coverImage.alt}
							class="h-full w-full object-cover"
							loading="lazy"
							width={600}
							height={400}
						/>
					) : (
						<div class="from-accent/20 to-primary/20 flex h-full w-full items-center justify-center bg-gradient-to-br">
							<svg
								class="h-8 w-8 text-gray-400"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
								/>
							</svg>
						</div>
					)
				}
				{
					draft && (
						<div class="bg-warning absolute top-2 left-2 rounded px-2 py-1 text-xs font-semibold tracking-wider text-black uppercase">
							draft
						</div>
					)
				}
			</div>

			<!-- content -->
			<div class="flex min-w-0 flex-1 flex-col gap-2">
				<!-- title -->
				<h3 class="card-title line-clamp-1 text-lg font-semibold @[640px]:text-xl">
					{title}
				</h3>

				<!-- date -->
				<FormattedDate
					class="card-meta text-xs font-medium"
					date={publishDate}
				/>

				<!-- description -->
				{
					withDesc && description && (
						<p class="card-text line-clamp-1 text-sm leading-relaxed">
							{description}
						</p>
					)
				}

				<!-- tags -->
				{
					tags && tags.length > 0 && (
						<div class="flex min-w-0 flex-wrap items-center gap-1.5">
							{tags.slice(0, 3).map((tag: string) => (
								<span class="card-badge whitespace-nowrap px-2 py-1 text-xs font-medium">
									#{tag}
								</span>
							))}
							{tags.length > 3 && (
								<span class="card-badge px-2 py-1 text-xs">
									+{tags.length - 3}
								</span>
							)}
						</div>
					)
				}
			</div>
		</div>
	</a>
</Tag>

---
import { type CollectionEntry, render } from "astro:content";
import type { HTMLTag, Polymorphic } from "astro/types";
import LikeButton from "@/components/LikeButton.astro";
import ViewCounter from "@/components/ViewCounter.astro";

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
	tweet: CollectionEntry<"note">;
};

const { as: Tag = "article", tweet } = Astro.props;
const { Content } = await render(tweet);

const display_name = tweet.data.title;
---

<Tag
	class="tweet-card border border-zinc-200 dark:border-zinc-700 rounded-lg px-4 py-3 transition-colors hover:bg-zinc-50 dark:hover:bg-zinc-800/50"
	data-pagefind-body
>
	<!-- clickable link wrapper for tweet content -->
	<a href={`/tweets/${tweet.id}`} class="block tweet-link">
		<!-- header: name only -->
		<div class="flex items-center gap-1.5 mb-2">
			<span class="tweet-heading font-semibold text-base text-zinc-900 dark:text-zinc-100">{display_name}</span>
		</div>

		<!-- tweet content -->
		<div class="tweet-content prose prose-sm prose-cactus max-w-none mb-3 [&>p:last-of-type]:mb-0">
			<Content />
		</div>

		<!-- metadata: time 路 date -->
		<div class="flex items-center gap-1 text-sm text-zinc-500 dark:text-zinc-400 mb-3">
			<time datetime={tweet.data.publishDate.toISOString()}>
				{new Intl.DateTimeFormat("en-US", { hour: "2-digit", minute: "2-digit" }).format(tweet.data.publishDate)}
			</time>
			<span>路</span>
			<time datetime={tweet.data.publishDate.toISOString()}>
				{new Intl.DateTimeFormat("en-US", { month: "short", day: "numeric", year: "numeric" }).format(tweet.data.publishDate)}
			</time>
		</div>

		<!-- metrics: views 路 likes -->
		<div class="flex items-center gap-3 text-sm text-zinc-500 dark:text-zinc-400 mb-3 border-y border-zinc-200 dark:border-zinc-700 py-2">
			<ViewCounter slug={tweet.id} content_type="tweet" />
			<span>路</span>
			<div class="flex items-center gap-1.5">
				<span class="like-total-count" data-slug={tweet.id} data-type="tweet">0</span>
				<span>Likes</span>
			</div>
		</div>
	</a>

	<!-- action buttons -->
	<div class="flex items-center justify-around border-zinc-200 dark:border-zinc-700">
		<!-- comment disabled -->
		<button
			type="button"
			class="flex items-center gap-2 text-zinc-400 dark:text-zinc-600 transition-colors p-2 rounded-full cursor-not-allowed opacity-50"
			disabled
			aria-label="Comment (disabled)"
		>
			<svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
			</svg>
		</button>

		<!-- retweet disabled -->
		<button
			type="button"
			class="flex items-center gap-2 text-zinc-400 dark:text-zinc-600 transition-colors p-2 rounded-full cursor-not-allowed opacity-50"
			disabled
			aria-label="Retweet (disabled)"
		>
			<svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
			</svg>
		</button>

		<!-- like button without count -->
		<LikeButton slug={tweet.id} content_type="tweet" show_count={false} icon_size="sm" class="text-zinc-500 hover:text-red-500 dark:text-zinc-400 dark:hover:text-red-400 transition-colors" />

		<!-- share button -->
		<button
			type="button"
			class="copy-link-btn flex items-center gap-2 text-zinc-500 hover:text-blue-500 dark:text-zinc-400 dark:hover:text-blue-400 transition-colors p-2 rounded-full hover:bg-blue-500/10"
			data-slug={tweet.id}
			aria-label="Share"
		>
			<svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
			</svg>
		</button>
	</div>
</Tag>

<script>
	interface LikeResponse {
		user_likes: number;
		total_likes: number;
		unique_users: number;
	}

	const WORKER_URL = import.meta.env.PUBLIC_ANALYTICS_URL || "http://localhost:8787";
	const SITE_URL = import.meta.env.SITE || "https://thuvasooriya.me";

	async function fetch_total_likes() {
		const like_counters = document.querySelectorAll<HTMLElement>(".like-total-count");
		
		for (const counter of like_counters) {
			const slug = counter.dataset.slug;
			const type = counter.dataset.type;
			
			if (!slug || !type) continue;
			
			try {
				const res = await fetch(`${WORKER_URL}/api/analytics/like/${type}/${slug}`);
				if (!res.ok) continue;
				
				const data: LikeResponse = await res.json();
				counter.textContent = String(data.total_likes);
			} catch (error) {
				console.error("Failed to fetch likes:", error);
			}
		}
	}

	function init_share_buttons() {
		document.querySelectorAll<HTMLButtonElement>(".copy-link-btn").forEach((button) => {
			if (button.dataset.initialized === "true") return;
			button.dataset.initialized = "true";

			button.addEventListener("click", async (e) => {
				e.preventDefault();
				e.stopPropagation();
				
				const slug = button.dataset.slug;
				if (!slug) return;

				const tweet_card = button.closest(".tweet-card");
				if (!tweet_card) return;

				const heading_el = tweet_card.querySelector(".tweet-heading");
				const content_el = tweet_card.querySelector(".tweet-content");
				const heading = heading_el?.textContent?.trim() || "";
				const text_content = content_el?.textContent?.trim() || "";
				const tweet_url = `${SITE_URL}/tweets/${slug}`;
				const share_text = `${heading}\n\n${text_content}\n\n${tweet_url}`;

				try {
					if (navigator.clipboard) {
						await navigator.clipboard.writeText(share_text);
						
						// visual feedback
						const original_html = button.innerHTML;
						button.innerHTML = '<svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" /></svg>';
						button.classList.add("text-green-500");
						
						setTimeout(() => {
							button.innerHTML = original_html;
							button.classList.remove("text-green-500");
						}, 2000);
					}
				} catch (error) {
					console.error("Failed to copy to clipboard:", error);
				}
			});
		});
	}

	// initial load
	if (document.readyState === "loading") {
		document.addEventListener("DOMContentLoaded", () => {
			fetch_total_likes();
			init_share_buttons();
		});
	} else {
		fetch_total_likes();
		init_share_buttons();
	}

	// view transitions
	document.addEventListener("astro:page-load", () => {
		fetch_total_likes();
		init_share_buttons();
	});
</script>

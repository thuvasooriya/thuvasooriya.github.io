---
// Heavy inspiration taken from Astro Starlight -> https://github.com/withastro/starlight/blob/main/packages/starlight/components/Search.astro

import "@/styles/blocks/search.css";
---

<site-search class="ms-auto" id="search">
	<button
		class="hover:text-primary relative h-9 w-9 cursor-pointer rounded-md p-2"
		aria-keyshortcuts="Control+K Meta+K"
		data-open-modal
		disabled
	>
		<svg
			aria-hidden="true"
			class="search-icon absolute start-1/2 top-1/2 h-5 w-5 -translate-x-1/2 -translate-y-1/2"
			fill="none"
			stroke="currentColor"
			stroke-linecap="round"
			stroke-linejoin="round"
			stroke-width="2"
			viewBox="0 0 24 24"
			xmlns="http://www.w3.org/2000/svg"
		>
			<circle class="search-circle" cx="10" cy="10" r="7"></circle>
			<path class="search-line" d="M21 21l-6-6"></path>
		</svg>
		<span class="sr-only">Open Search</span>
	</button>
	<dialog
		aria-label="search"
		class="search-dialog bg-global-bg h-full max-h-full w-full max-w-full border border-zinc-400 shadow-sm backdrop:backdrop-blur-sm open:flex sm:mx-auto sm:mt-16 sm:mb-auto sm:h-max sm:max-h-[calc(100%-8rem)] sm:min-h-[15rem] sm:w-5/6 sm:max-w-[48rem] sm:rounded-md"
	>
		<div class="dialog-frame flex grow flex-col gap-4 p-6 pt-12 sm:pt-6">
			<button
				class="ms-auto cursor-pointer rounded-md bg-zinc-200 p-2 font-semibold dark:bg-zinc-700"
				data-close-modal>close</button
			>
			{
				import.meta.env.DEV ? (
					<div class="mx-auto text-center">
						<p>
							search is only available in production builds. <br />
							try building and previewing the site to test it out locally.
						</p>
					</div>
				) : (
					<div class="search-container">
						<div id="cactus__search" />
					</div>
				)
			}
		</div>
	</dialog>
</site-search>

<style>
	.search-circle {
		transition:
			r 300ms cubic-bezier(0.4, 0, 0.2, 1),
			transform 300ms cubic-bezier(0.4, 0, 0.2, 1);
		transform-origin: center;
	}

	.search-line {
		transition:
			opacity 300ms cubic-bezier(0.4, 0, 0.2, 1),
			transform 300ms cubic-bezier(0.4, 0, 0.2, 1);
		transform-origin: center;
	}

	button:hover .search-circle {
		r: 6;
		transform: scale(1.05);
	}

	button:hover .search-line {
		opacity: 0.7;
		transform: translateX(0.5px) translateY(0.5px);
	}

	button:active .search-circle {
		r: 5.5;
		transform: scale(0.95);
	}

	button:active .search-line {
		opacity: 0.5;
	}

	/* snappy animation for search dialog */
	.search-dialog {
		opacity: 0;
		transform: scale(0.95) translateY(-10px);
		transition:
			opacity 150ms cubic-bezier(0.4, 0, 0.2, 1),
			transform 150ms cubic-bezier(0.4, 0, 0.2, 1),
			display 150ms cubic-bezier(0.4, 0, 0.2, 1) allow-discrete,
			overlay 150ms cubic-bezier(0.4, 0, 0.2, 1) allow-discrete;
	}

	.search-dialog[open] {
		opacity: 1;
		transform: scale(1) translateY(0);
	}

	@starting-style {
		.search-dialog[open] {
			opacity: 0;
			transform: scale(0.95) translateY(-10px);
		}
	}

	.search-dialog::backdrop {
		background-color: rgb(0 0 0 / 0);
		transition:
			background-color 150ms cubic-bezier(0.4, 0, 0.2, 1),
			overlay 150ms cubic-bezier(0.4, 0, 0.2, 1) allow-discrete,
			display 150ms cubic-bezier(0.4, 0, 0.2, 1) allow-discrete;
	}

	.search-dialog[open]::backdrop {
		background-color: rgb(0 0 0 / 0.5);
	}

	@starting-style {
		.search-dialog[open]::backdrop {
			background-color: rgb(0 0 0 / 0);
		}
	}
</style>

<script>
	class SiteSearch extends HTMLElement {
		#closeBtn: HTMLButtonElement;
		#dialog: HTMLDialogElement;
		#dialogFrame: HTMLDivElement;
		#openBtn: HTMLButtonElement;
		#controller: AbortController;

		constructor() {
			super();
			this.#openBtn = this.querySelector<HTMLButtonElement>("button[data-open-modal]")!;
			this.#closeBtn = this.querySelector<HTMLButtonElement>("button[data-close-modal]")!;
			this.#dialog = this.querySelector("dialog")!;
			this.#dialogFrame = this.querySelector(".dialog-frame")!;
			this.#controller = new AbortController();

			// Set up events
			this.#openBtn.addEventListener("click", this.openModal);
			this.#openBtn.disabled = false;
			this.#closeBtn.addEventListener("click", this.closeModal);
			this.#dialog.addEventListener("close", () => {
				window.removeEventListener("click", this.onWindowClick);
			});

			// only add pagefind in production
			if (import.meta.env.DEV) return;
			const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));
			onIdle(async () => {
				const { PagefindUI } = await import("@pagefind/default-ui");
				new PagefindUI({
					baseUrl: import.meta.env.BASE_URL,
					bundlePath: import.meta.env.BASE_URL.replace(/\/$/, "") + "/pagefind/",
					element: "#cactus__search",
					showImages: false,
					showSubResults: true,
				});
			});
		}

		connectedCallback() {
			// window events, requires cleanup
			window.addEventListener("keydown", this.onWindowKeydown, { signal: this.#controller.signal });
		}

		disconnectedCallback() {
			this.#controller.abort();
		}

	openModal = (event?: MouseEvent) => {
		this.#dialog.showModal();
		this.querySelector("input")?.focus();
		event?.stopPropagation();
		window.addEventListener("click", this.onWindowClick, { signal: this.#controller.signal });
	};

	closeModal = () => {
		this.#dialog.close();
	};

		onWindowClick = (event: MouseEvent) => {
			// check if it's a link
			const isLink = "href" in (event.target || {});
			// make sure the click is either a link or outside of the dialog
			if (
				isLink ||
				(document.body.contains(event.target as Node) &&
					!this.#dialogFrame.contains(event.target as Node))
			) {
				this.closeModal();
			}
		};

		onWindowKeydown = (e: KeyboardEvent) => {
			// check if it's the Control+K or âŒ˜+K shortcut
			if ((e.metaKey === true || e.ctrlKey === true) && e.key === "k") {
				this.#dialog.open ? this.closeModal() : this.openModal();
				e.preventDefault();
			}
		};
	}

	customElements.define("site-search", SiteSearch);
</script>

---
import { type CollectionEntry, getCollection, render } from "astro:content";
import type { GetStaticPaths } from "astro";
import ContentPreview from "@/components/ContentPreview.astro";
import PageLayout from "@/layouts/Base.astro";

export const getStaticPaths = (async () => {
	const all_proj = await getCollection("proj");

	// get all index.md entries (these are the main project pages)
	// index files have IDs like 'azem', 'learning-zig' (no slash)
	const project_indexes = all_proj
		.filter((entry) => !entry.id.includes("/"))
		.filter((entry) => import.meta.env.DEV || entry.data.status !== "draft");

	// get all article entries (nested markdown files)
	// article files have IDs like 'learning-zig/base64', 'echo/rv32-on-zybo' (with slash)
	const articles = all_proj.filter((entry) => entry.id.includes("/"));

	// combine both project pages and article pages
	return [
		...project_indexes.map((entry) => ({
			params: { slug: entry.id },
			props: { entry, is_article: false },
		})),
		...articles.map((entry) => ({
			params: { slug: entry.id },
			props: { entry, is_article: true },
		})),
	];
}) satisfies GetStaticPaths;

interface Props {
	entry: CollectionEntry<"proj">;
	is_article: boolean;
}

const { entry, is_article } = Astro.props;
const { Content } = await render(entry);

// for articles, get the project folder to link back
const project_folder = is_article ? entry.id.split("/")[0] : entry.id;

// get related articles (only for project index pages)
const all_proj = await getCollection("proj");
const related_articles = is_article
	? []
	: all_proj
			.filter((e) => {
				const folder = e.id.split("/")[0];
				return folder === project_folder && e.id.includes("/");
			})
			.filter((e) => e.data.publishDate) // only show articles with publishDate
			.sort((a, b) => {
				if (!a.data.publishDate || !b.data.publishDate) return 0;
				return b.data.publishDate.getTime() - a.data.publishDate.getTime();
			});

const meta = {
	description: entry.data.description || `project: ${entry.data.title}`,
	title: entry.data.title,
};

const status_colors = {
	active:
		"bg-[var(--color-mocha-green)] dark:bg-[var(--color-mocha-green)] text-[var(--color-mocha-base)] dark:text-[var(--color-mocha-base)]",
	archived: "bg-zinc-400 dark:bg-zinc-600 text-zinc-900 dark:text-zinc-100",
	planning:
		"bg-[var(--color-mocha-blue)] dark:bg-[var(--color-mocha-blue)] text-[var(--color-mocha-base)] dark:text-[var(--color-mocha-base)]",
	paused:
		"bg-[var(--color-mocha-yellow)] dark:bg-[var(--color-mocha-yellow)] text-[var(--color-mocha-base)] dark:text-[var(--color-mocha-base)]",
	draft:
		"bg-[var(--color-mocha-red)] dark:bg-[var(--color-mocha-red)] text-[var(--color-mocha-base)] dark:text-[var(--color-mocha-base)]",
};
---

<PageLayout meta={meta}>
	<div class="mb-6">
		{
			is_article ? (
				<a
					class="hover:text-accent mb-2 inline-block text-sm transition-colors"
					href={`/projects/${project_folder}/`}
				>
					<span aria-hidden="true">←</span> back to {project_folder}
				</a>
			) : (
				<a class="hover:text-accent mb-2 inline-block text-sm transition-colors" href="/projects/">
					<span aria-hidden="true">←</span> back to projects
				</a>
			)
		}
	</div>

	<article>
		<div class="mb-6">
			<div class="mb-3 flex flex-wrap items-start justify-between gap-3">
				<h1 class="title text-3xl">{entry.data.title}</h1>
				{
					!is_article && entry.data.status && (
						<span class={`rounded-full px-3 py-1 text-sm font-medium ${status_colors[entry.data.status]}`}>
							{entry.data.status}
						</span>
					)
				}
			</div>

			{
				entry.data.description && (
					<p class="mb-4 text-lg text-zinc-600 dark:text-zinc-400">{entry.data.description}</p>
				)
			}

			{
				!is_article && (
					<div class="mb-4 flex flex-wrap gap-4 text-sm">
						{entry.data.demoLink && (
							<a
								class="hover:text-accent flex items-center gap-1 transition-colors"
								href={entry.data.demoLink}
								rel="noopener noreferrer"
								target="_blank"
							>
								<svg
									aria-hidden="true"
									class="h-5 w-5"
									fill="none"
									stroke="currentColor"
									viewBox="0 0 24 24"
									xmlns="http://www.w3.org/2000/svg"
								>
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
								</svg>
								live demo
							</a>
						)}

						{entry.data.github && (
							<a
								class="hover:text-accent flex items-center gap-1 transition-colors"
								href={entry.data.github}
								rel="noopener noreferrer"
								target="_blank"
							>
								<svg
									aria-hidden="true"
									class="h-5 w-5"
									fill="currentColor"
									viewBox="0 0 24 24"
									xmlns="http://www.w3.org/2000/svg"
								>
									<path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
								</svg>
								github repository
							</a>
						)}

						{entry.data.links?.map((link) => (
							<a
								class="hover:text-accent flex items-center gap-1 transition-colors"
								href={link.url}
								rel="noopener noreferrer"
								target="_blank"
							>
								<svg
									aria-hidden="true"
									class="h-4 w-4"
									fill="none"
									stroke="currentColor"
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									viewBox="0 0 24 24"
									xmlns="http://www.w3.org/2000/svg"
								>
									<path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" />
									<path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" />
								</svg>
								{link.label}
							</a>
						))}
					</div>
				)
			}

			{
				!is_article && entry.data.tags && entry.data.tags.length > 0 && (
					<div class="mb-6 flex flex-wrap gap-2">
						{entry.data.tags.map((tag) => (
							<span class="bg-accent/10 text-accent rounded-sm px-2 py-1 text-sm">#{tag}</span>
						))}
					</div>
				)
			}
		</div>

		<div class="prose">
			<Content />
		</div>
	</article>

	{
		related_articles.length > 0 && (
			<section class="mt-12">
				<h2 class="title mb-6 text-xl">related articles & logs</h2>
				<div class="space-y-4">
					{related_articles.map((article) => {
						const article_slug = article.id.replace(project_folder + "/", "").replace(".md", "");
						return (
							<ContentPreview
								entry={article}
								href={`/projects/${project_folder}/${article_slug}/`}
							/>
						);
					})}
				</div>
			</section>
		)
	}
</PageLayout>
